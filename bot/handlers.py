from aiogram import types
from aiogram import Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from .bottom import *
from .config import ADMIN_GROUP_ID
from .database import Database
import os
import re

class UserStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_application = State()
    waiting_for_contact = State()
    waiting_for_settings = State()
    waiting_for_contacts = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
    waiting_for_address = State()
    waiting_for_photo = State()
    waiting_for_description = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    waiting_for_call_phone = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    in_admin_chat = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    waiting_for_reply = State()
    waiting_for_reply_text = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    waiting_for_change_name = State()
    waiting_for_change_phone = State()

def register_handlers(dp: Dispatcher):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –§–æ—Ä–º–∞—Ç: {admin_msg_id: {'user_id': user_id, 'username': username}}
    last_messages = {}
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ contacts.txt
    with open(os.path.join(os.path.dirname(__file__), 'contacts.txt'), 'r', encoding='utf-8') as f:
        CONTACTS_TEXT = f.read().strip()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    previous_states = {
        UserStates.waiting_for_name: None,  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç—É
        UserStates.waiting_for_phone: UserStates.waiting_for_name,
        UserStates.waiting_for_application: None,  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        UserStates.waiting_for_address: UserStates.waiting_for_application,
        UserStates.waiting_for_photo: UserStates.waiting_for_address,
        UserStates.waiting_for_description: UserStates.waiting_for_photo,
        UserStates.waiting_for_contact: None,  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        UserStates.waiting_for_settings: None,  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        UserStates.waiting_for_contacts: None,  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        UserStates.waiting_for_call_phone: UserStates.waiting_for_contact,
        UserStates.waiting_for_change_name: UserStates.waiting_for_settings,
        UserStates.waiting_for_change_phone: UserStates.waiting_for_settings,
        UserStates.in_admin_chat: UserStates.waiting_for_contact,
    }

    async def handle_back_button(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state in previous_states:
            prev_state = previous_states[current_state]
            if prev_state is None:
                await state.clear()
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_button)
            else:
                await state.set_state(prev_state)
                if prev_state == UserStates.waiting_for_application:
                    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=submit_application)
                elif prev_state == UserStates.waiting_for_settings:
                    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_settings)
                elif prev_state == UserStates.waiting_for_contact:
                    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=contact_us)
                elif prev_state == UserStates.waiting_for_address:
                    await message.reply(
                        "–®–∞–≥ 1/3: –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –ø—Ä–æ–±–ª–µ–º–Ω—É—é —É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                        reply_markup=inline_steps
                    )
                elif prev_state == UserStates.waiting_for_photo:
                    await message.reply(
                        "–®–∞–≥ 2/3: –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                        reply_markup=inline_steps
                    )
                elif prev_state == UserStates.waiting_for_name:
                    await message.reply(
                        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
                        reply_markup=types.ReplyKeyboardRemove()
                    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    @dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
    async def universal_back_handler(message: types.Message, state: FSMContext):
        await handle_back_button(message, state)

    @dp.message(Command("start"))
    async def send_welcome(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user_data = db.get_user(message.from_user.id)
        
        if user_data:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(full_name=user_data['full_name'], phone=user_data['phone'])
            await message.reply(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data['full_name']}! üëã\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=start_button
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await state.set_state(UserStates.waiting_for_name)
            await message.reply(
                "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å.\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
                reply_markup=types.ReplyKeyboardRemove()
            )

    @dp.message(StateFilter(UserStates.waiting_for_name))
    async def handle_name(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞)
        name_parts = message.text.strip().split()
        if len(name_parts) < 2:
            await message.reply(
                "‚ùå –ò–º—è –∏ –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return

        await state.update_data(full_name=message.text)
        await state.set_state(UserStates.waiting_for_phone)
        await message.reply(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ +7 —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            reply_markup=types.ReplyKeyboardRemove()
        )

    @dp.message(StateFilter(UserStates.waiting_for_phone))
    async def handle_phone(message: types.Message, state: FSMContext):
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = message.text.strip()
        if not phone.startswith('+7') or len(phone) != 12 or not phone[1:].isdigit():
            await message.reply(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –¥–æ–ª–∂–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ +7. –£–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.update_data(phone=phone)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=data['full_name'],
            phone=phone
        )
        
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await message.reply(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
            reply_markup=start_button
        )

    @dp.message(StateFilter(None))
    async def handle_main_menu(message: types.Message, state: FSMContext):
        if message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
            await state.set_state(UserStates.waiting_for_application)
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –£–ö:", reply_markup=submit_application)
        elif message.text == "–°–≤—è–∑–∞—Ç—å—Å—è":
            await state.set_state(UserStates.waiting_for_contact)
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:", reply_markup=contact_us)
        elif message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await state.set_state(UserStates.waiting_for_settings)
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_settings)
        elif message.text == "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
            await state.set_state(UserStates.waiting_for_contacts)
            await message.reply(CONTACTS_TEXT, parse_mode="MarkdownV2")

    @dp.message(StateFilter(UserStates.waiting_for_application))
    async def handle_application(message: types.Message, state: FSMContext):
        if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            user_data = db.get_user(message.from_user.id)
            if user_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(full_name=user_data['full_name'], phone=user_data['phone'])
            
            await state.set_state(UserStates.waiting_for_address)
            await message.reply(
                "–®–∞–≥ 1/3: –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –ø—Ä–æ–±–ª–µ–º–Ω—É—é —É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                reply_markup=inline_steps
            )
        elif message.text == "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            user_data = db.get_user(message.from_user.id)
            if user_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(
                    full_name=user_data['full_name'],
                    phone=user_data['phone'],
                    is_suggestion=True
                )
            await state.set_state(UserStates.waiting_for_description)
            await message.reply("üí°–†–∞—Å–ø–∏—à–∏—Ç–µ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö: (–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å)", reply_markup=inline_back)

    @dp.callback_query()
    async def handle_callback(callback: types.CallbackQuery, state: FSMContext):
        current_state = await state.get_state()
        
        if callback.data == "back":
            if current_state == UserStates.waiting_for_address:
                await state.set_state(UserStates.waiting_for_application)
                await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=submit_application)
            elif current_state == UserStates.waiting_for_photo:
                await state.set_state(UserStates.waiting_for_address)
                await callback.message.edit_text(
                    "–®–∞–≥ 1/3: –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –ø—Ä–æ–±–ª–µ–º–Ω—É—é —É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                    reply_markup=inline_steps
                )
            elif current_state == UserStates.waiting_for_description:
                await state.set_state(UserStates.waiting_for_photo)
                await callback.message.edit_text(
                    "–®–∞–≥ 2/3: –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                    reply_markup=inline_steps
                )
        
        elif callback.data == "skip":
            if current_state == UserStates.waiting_for_address:
                await state.update_data(address="–ù–µ —É–∫–∞–∑–∞–Ω")
                await state.set_state(UserStates.waiting_for_photo)
                await callback.message.edit_text(
                    "–®–∞–≥ 2/3: –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                    reply_markup=inline_steps
                )
            elif current_state == UserStates.waiting_for_photo:
                await state.update_data(media_type=None, media_id=None)
                await state.set_state(UserStates.waiting_for_description)
                await callback.message.edit_text(
                    "–®–∞–≥ 3/3: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö:",
                    reply_markup=inline_back
                )
        
        elif callback.data == "reply":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã
            if str(callback.message.chat.id) != str(ADMIN_GROUP_ID):
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            message_id = callback.message.message_id
            if message_id not in last_messages:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
                return
                
            user_info = last_messages[message_id]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(
                reply_to_user_id=user_info['user_id'],
                reply_to_username=user_info['username'],
                reply_to_full_name=user_info['full_name']
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            await state.set_state(UserStates.waiting_for_reply_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await callback.message.reply(
                f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info['full_name']} (@{user_info['username']}):"
            )
        
        elif callback.data in ["phone_correct", "phone_change", "end_chat"]:
            if callback.data == "phone_correct":
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                user_data = db.get_user(callback.from_user.id)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—É
                admin_message = (
                    "üìû –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫:\n"
                    f"–ò–º—è: {user_data['full_name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
                    f"Username: @{callback.from_user.username}"
                )
                await callback.bot.send_message(chat_id=ADMIN_GROUP_ID, text=admin_message)
                # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await callback.message.edit_text(
                    "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    reply_markup=None
                )
                await state.clear()
            elif callback.data == "phone_change":
                await callback.message.edit_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:",
                    reply_markup=None
                )
            elif callback.data == "end_chat":
                await state.clear()
                await callback.message.edit_text(
                    "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
                )
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_button)
        
        await callback.answer()

    @dp.message(StateFilter(UserStates.waiting_for_address))
    async def handle_address(message: types.Message, state: FSMContext):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(address=message.text)
        await state.set_state(UserStates.waiting_for_photo)
        await message.reply(
            "–®–∞–≥ 2/3: –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
            reply_markup=inline_steps
        )

    @dp.message(StateFilter(UserStates.waiting_for_photo))
    async def handle_photo(message: types.Message, state: FSMContext):
        if message.photo or message.video:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
            media_type = "photo" if message.photo else "video"
            media_id = message.photo[-1].file_id if message.photo else message.video.file_id
            await state.update_data(media_type=media_type, media_id=media_id)
            await state.set_state(UserStates.waiting_for_description)
            await message.reply(
                "–®–∞–≥ 3/3: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö:",
                reply_markup=inline_back
            )
        else:
            await message.reply(
                "‚ùå–í –¥–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=inline_steps
            )

    @dp.message(StateFilter(UserStates.waiting_for_description))
    async def handle_description(message: types.Message, state: FSMContext):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.get_data()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–∂–∞–ª–æ–±–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
        message_type = "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" if data.get('is_suggestion') else "–∂–∞–ª–æ–±–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_response = f"‚úÖ –í–∞—à–µ {message_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_response = (
            f"‚ùóÔ∏è–ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ {message_type}:\n\n"
            f"username: @{message.from_user.username}\n"
            f"–ò–º—è –∏ –§–∞–º–∏–ª–∏—è: {data.get('full_name')}\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.get('phone')}\n"
        )
        
        if not data.get('is_suggestion'):
            admin_response += f"–ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        
        admin_response += f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {message.text}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if data.get('media_type') == 'photo':
            await message.bot.send_photo(
                chat_id=ADMIN_GROUP_ID,
                photo=data['media_id'],
                caption=admin_response
            )
        elif data.get('media_type') == 'video':
            await message.bot.send_video(
                chat_id=ADMIN_GROUP_ID,
                video=data['media_id'],
                caption=admin_response
            )
        else:
            await message.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=admin_response
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(user_response, reply_markup=start_button)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    @dp.message(StateFilter(UserStates.waiting_for_contact))
    async def handle_contact(message: types.Message, state: FSMContext):
        if message.text == "–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            user_data = db.get_user(message.from_user.id)
            if user_data:
                await state.set_state(UserStates.waiting_for_call_phone)
                await message.reply(
                    f"–≠—Ç–æ –í–∞—à –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {user_data['phone']}? –ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç, –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–¥–µ—Å—å",
                    reply_markup=confirm_phone
                )
        elif message.text == "–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ —á–∞—Ç-–±–æ—Ç–µ":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            user_data = db.get_user(message.from_user.id)
            if user_data:
                await state.update_data(
                    full_name=user_data['full_name'],
                    phone=user_data['phone']
                )
                await state.set_state(UserStates.in_admin_chat)
                await message.reply(
                    "‚úÖüìû‚úÖ–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø - –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ \"–£–≠–†-–Æ–ì\", –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –í–∞–º. "
                    "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å –∏ –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞",
                    reply_markup=end_chat
                )

    @dp.message(StateFilter(UserStates.waiting_for_call_phone))
    async def handle_new_phone(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = message.text.strip()
        if not phone.startswith('+7') or len(phone) != 12 or not phone[1:].isdigit():
            await message.reply(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=None
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_user_phone(message.from_user.id, phone)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—É
        admin_message = (
            "üìû –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫:\n"
            f"–ò–º—è: {(await state.get_data()).get('full_name')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"Username: @{message.from_user.username}"
        )
        await message.bot.send_message(chat_id=ADMIN_GROUP_ID, text=admin_message)
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=start_button
        )
        await state.clear()

    @dp.message(StateFilter(UserStates.waiting_for_settings))
    async def handle_settings(message: types.Message, state: FSMContext):
        if message.text == "–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è":
            await state.set_state(UserStates.waiting_for_change_name)
            await message.reply(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –ò–º—è –∏ –§–∞–º–∏–ª–∏—é, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="–ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
        elif message.text == "–ü–æ–º–µ–Ω—è—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
            await state.set_state(UserStates.waiting_for_change_phone)
            await message.reply(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="–ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )

    @dp.message(StateFilter(UserStates.waiting_for_change_name))
    async def handle_change_name(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞)
        name_parts = message.text.strip().split()
        if len(name_parts) < 2:
            await message.reply(
                "‚ùå –ò–º—è –∏ –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="–ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_user_name(message.from_user.id, message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.reply(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!",
            reply_markup=start_button
        )
        await state.clear()

    @dp.message(StateFilter(UserStates.waiting_for_change_phone))
    async def handle_change_phone(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = message.text.strip()
        if not phone.startswith('+7') or len(phone) != 12 or not phone[1:].isdigit():
            await message.reply(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="–ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_user_phone(message.from_user.id, phone)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.reply(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!",
            reply_markup=start_button
        )
        await state.clear()

    @dp.message(StateFilter(UserStates.waiting_for_contacts))
    async def handle_contacts(message: types.Message, state: FSMContext):
        if message.text == "–ù–∞–∑–∞–¥":
            await state.clear()
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=start_button)

    @dp.message(StateFilter(UserStates.in_admin_chat))
    async def handle_admin_chat(message: types.Message, state: FSMContext):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.get_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        admin_message = (
            "üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ:\n\n"
            f"–û—Ç: {data.get('full_name')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
            f"Username: @{message.from_user.username}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        sent_message = None
        if message.photo:
            sent_message = await message.bot.send_photo(
                chat_id=ADMIN_GROUP_ID,
                photo=message.photo[-1].file_id,
                caption=admin_message,
                reply_markup=reply_button
            )
        elif message.video:
            sent_message = await message.bot.send_video(
                chat_id=ADMIN_GROUP_ID,
                video=message.video.file_id,
                caption=admin_message,
                reply_markup=reply_button
            )
        else:
            sent_message = await message.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=admin_message,
                reply_markup=reply_button
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if sent_message:
            last_messages[sent_message.message_id] = {
                'user_id': message.from_user.id,
                'username': message.from_user.username,
                'full_name': data.get('full_name')
            }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.",
            reply_markup=end_chat
        )

    @dp.message(StateFilter(UserStates.waiting_for_reply_text))
    async def handle_reply_text(message: types.Message, state: FSMContext):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        data = await state.get_data()
        user_id = data.get('reply_to_user_id')
        user_full_name = data.get('reply_to_full_name')
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = (
                "üë®‚Äçüíº –û—Ç–≤–µ—Ç –æ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:\n\n"
                f"{message.text}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if message.photo:
                await message.bot.send_photo(
                    chat_id=user_id,
                    photo=message.photo[-1].file_id,
                    caption=response
                )
            elif message.video:
                await message.bot.send_video(
                    chat_id=user_id,
                    video=message.video.file_id,
                    caption=response
                )
            else:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=response
                )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await message.reply(
                f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_full_name}."
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        except Exception as e:
            await message.reply(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
                f"–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞."
            )
            await state.clear()

            
            
