from aiogram import types
from aiogram import Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from .bottom import (
    start_button, admin_panel, admin_management, user_with_admin,
    submit_application, contact_us, get_settings, inline_steps,
    inline_back, confirm_phone, end_chat, reply_button
)
from .config import ADMIN_GROUP_ID
from .database import Database
from .admin import AdminPanel, AdminStates
import os
import re
from aiogram import Router, F

class BlockedUserMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        if isinstance(event, (Message, CallbackQuery)):
            user_id = event.from_user.id
            db = Database()
            if db.is_user_blocked(user_id):
                block_info = db.get_block_info(user_id)
                reason = f"\n–ü—Ä–∏—á–∏–Ω–∞: {block_info['reason']}" if block_info['reason'] else ""
                if isinstance(event, Message):
                    await event.answer(f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º{reason}")
                else:
                    await event.answer(f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º{reason}", show_alert=True)
                return
        return await handler(event, data)

class UserStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_application = State()
    waiting_for_contact = State()
    waiting_for_settings = State()
    waiting_for_contacts = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
    waiting_for_address = State()
    waiting_for_photo = State()
    waiting_for_description = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    waiting_for_call_phone = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    in_admin_chat = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    waiting_for_reply = State()
    waiting_for_reply_text = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    waiting_for_change_name = State()
    waiting_for_change_phone = State()

def register_handlers(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    dp.message.middleware(BlockedUserMiddleware())
    dp.callback_query.middleware(BlockedUserMiddleware())
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    db = Database()
    admin_manager = AdminPanel()
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # –§–æ—Ä–º–∞—Ç: {admin_msg_id: {'user_id': user_id, 'username': username}}
    last_messages = {}
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ contacts.txt
    with open(os.path.join(os.path.dirname(__file__), 'contacts.txt'), 'r', encoding='utf-8') as f:
        CONTACTS_TEXT = f.read().strip()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    previous_states = {
        UserStates.waiting_for_name: None,  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç—É
        UserStates.waiting_for_phone: UserStates.waiting_for_name,
        UserStates.waiting_for_application: None,  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        UserStates.waiting_for_address: UserStates.waiting_for_application,
        UserStates.waiting_for_photo: UserStates.waiting_for_address,
        UserStates.waiting_for_description: UserStates.waiting_for_photo,
        UserStates.waiting_for_contact: None,  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        UserStates.waiting_for_settings: None,  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        UserStates.waiting_for_contacts: None,  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        UserStates.waiting_for_call_phone: UserStates.waiting_for_contact,
        UserStates.waiting_for_change_name: UserStates.waiting_for_settings,
        UserStates.waiting_for_change_phone: UserStates.waiting_for_settings,
        UserStates.in_admin_chat: UserStates.waiting_for_contact,
    }

    async def handle_back_button(message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state in previous_states:
            prev_state = previous_states[current_state]
            if prev_state is None:
                await state.clear()
                if admin_manager.is_admin(message.from_user.id):
                    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_with_admin)
                else:
                    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_button)
            else:
                await state.set_state(prev_state)
                if prev_state == UserStates.waiting_for_application:
                    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=submit_application)
                elif prev_state == UserStates.waiting_for_settings:
                    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_settings)
                elif prev_state == UserStates.waiting_for_contact:
                    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=contact_us)
                elif prev_state == UserStates.waiting_for_address:
                    await message.reply(
                        "–®–∞–≥ 1/3. üìù–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø—Ä–æ–±–ª–µ–º—ã (—É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                        reply_markup=inline_steps
                    )
                elif prev_state == UserStates.waiting_for_photo:
                    await message.reply(
                        "–®–∞–≥ 2/3. üñº–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                        reply_markup=inline_steps
                    )
                elif prev_state == UserStates.waiting_for_name:
                    await message.reply(
                        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
                        reply_markup=types.ReplyKeyboardRemove()
                    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    @dp.message(lambda message: message.text == "üîô–ù–∞–∑–∞–¥")
    async def universal_back_handler(message: types.Message, state: FSMContext):
        await handle_back_button(message, state)

    @dp.message(Command("start"))
    async def send_welcome(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if db.is_user_blocked(message.from_user.id):
            block_info = db.get_block_info(message.from_user.id)
            reason = f"\n–ü—Ä–∏—á–∏–Ω–∞: {block_info['reason']}" if block_info['reason'] else ""
            await message.reply(f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º{reason}")
            return
            
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.clear()
        db.clear_user_state(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user_data = db.get_user(message.from_user.id)
        
        if user_data:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            if admin_manager.is_admin(message.from_user.id):
                await message.reply(
                    '‚úàÔ∏è–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞ –£–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ "–£–≠–†-–Æ–ì". –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–æ–º–æ–º. –ü—Ä–æ—Å—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞:',
                    reply_markup=user_with_admin
                )
            else:
                await message.reply(
                    '‚úàÔ∏è–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞ –£–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ "–£–≠–†-–Æ–ì". –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–æ–º–æ–º. –ü—Ä–æ—Å—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞:',
                    reply_markup=start_button
                )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await state.set_state(UserStates.waiting_for_name)
            db.save_user_state(message.from_user.id, "waiting_for_name")
            await message.reply(
                "üåû–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º, –ø—Ä–∏—à–ª–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –í–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é",
                reply_markup=types.ReplyKeyboardRemove()
            )

    @dp.message(StateFilter(UserStates.waiting_for_name))
    async def handle_name(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞)
        name_parts = message.text.strip().split()
        if len(name_parts) < 2:
            await message.reply(
                "‚õîÔ∏èüìõ–ò–º—è –∏ –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª, –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—É. –¢–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã. –£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return

        await state.update_data(full_name=message.text)
        await state.set_state(UserStates.waiting_for_phone)
        db.save_user_state(message.from_user.id, "waiting_for_phone")
        await message.reply(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ +7 —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            reply_markup=types.ReplyKeyboardRemove()
        )

    @dp.message(StateFilter(UserStates.waiting_for_phone))
    async def handle_phone(message: types.Message, state: FSMContext):
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = message.text.strip()
        if not phone.startswith('+7') or len(phone) != 12 or not phone[1:].isdigit():
            await message.reply(
                "‚õîÔ∏èüìõ‚õîÔ∏è–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –¥–æ–ª–∂–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ +7. –£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.update_data(phone=phone)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            full_name=data['full_name'],
            phone=phone
        )
        
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        db.clear_user_state(message.from_user.id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if admin_manager.is_admin(message.from_user.id):
            await message.reply(reply_markup=user_with_admin)
        else:
            await message.reply(reply_markup=start_button)

    @dp.message(StateFilter(None))
    async def handle_main_menu(message: types.Message, state: FSMContext):
        if message.text == "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            if admin_manager.is_admin(message.from_user.id):
                await message.reply("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_panel)
            else:
                await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
        elif message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º":
            if admin_manager.is_admin(message.from_user.id):
                await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º:", reply_markup=user_with_admin)
            else:
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_button)
        
        elif message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            if admin_manager.is_admin(message.from_user.id):
                await message.reply("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_panel)
            else:
                await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
        elif message.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏":
            if admin_manager.is_main_admin(message.from_user.id):
                await message.reply("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=admin_management)
            else:
                await message.reply("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.")
        
        elif message.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
            if admin_manager.is_admin(message.from_user.id):
                users = db.get_all_users()
                if not users:
                    await message.reply("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                    return
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 20 —á–µ–ª–æ–≤–µ–∫
                users_per_page = 20
                total_pages = (len(users) + users_per_page - 1) // users_per_page
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard = []
                if total_pages > 1:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    keyboard.append([
                        types.InlineKeyboardButton(text="‚èÆÔ∏è", callback_data="first_page"),
                        types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="prev_page"),
                        types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="next_page"),
                        types.InlineKeyboardButton(text="‚è≠Ô∏è", callback_data="last_page")
                    ])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_buttons = []
                    for i in range(1, total_pages + 1):
                        if i == 1 or i == total_pages or (i >= 1 - 1 and i <= 1 + 1):
                            page_buttons.append(types.InlineKeyboardButton(
                                text=f"{'üî¥' if i == 1 else '‚ö™Ô∏è'} {i}",
                                callback_data=f"page_{i}"
                            ))
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ —Ä—è–¥—ã –ø–æ 5 —à—Ç—É–∫
                    for i in range(0, len(page_buttons), 5):
                        keyboard.append(page_buttons[i:i+5])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                header = (
                    f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{total_pages})\n"
                    f"–í—Å–µ–≥–æ: {len(users)} | "
                    f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {sum(1 for user in users if admin_manager.is_user_blocked(user['user_id']))} | "
                    f"–ê–¥–º–∏–Ω–æ–≤: {sum(1 for user in users if admin_manager.is_admin(user['user_id']))}\n\n"
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                user_list = ""
                for user in users[:users_per_page]:
                    status = "üö´" if admin_manager.is_user_blocked(user['user_id']) else "‚úÖ"
                    role = "üëë" if admin_manager.is_main_admin(user['user_id']) else "üë§" if admin_manager.is_admin(user['user_id']) else "üë•"
                    user_list += (
                        f"{status}{role} {user['full_name']}\n"
                        f"ID: {user['user_id']} | "
                        f"@{user['username'] if user['username'] else '–ù–µ—Ç username'} | "
                        f"{user['phone']}\n"
                        "-------------------\n"
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await message.reply(
                    header + user_list,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None
                )
            else:
                await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
        elif message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞":
            if admin_manager.is_admin(message.from_user.id):
                await state.set_state(AdminStates.waiting_for_broadcast)
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]],
                    resize_keyboard=True
                ))
        
        elif message.text == "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ":
            if admin_manager.is_admin(message.from_user.id):
                await state.set_state(AdminStates.waiting_for_user_info)
                await message.reply("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]],
                    resize_keyboard=True
                ))
        
        elif message.text == "üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞":
            if admin_manager.is_admin(message.from_user.id):
                await state.set_state(AdminStates.waiting_for_block_user)
                await message.reply("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]],
                    resize_keyboard=True
                ))
        
        elif message.text == "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞":
            if admin_manager.is_admin(message.from_user.id):
                await state.set_state(AdminStates.waiting_for_unblock_user)
                await message.reply("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]],
                    resize_keyboard=True
                ))
        
        elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            if admin_manager.is_main_admin(message.from_user.id):
                await state.set_state(AdminStates.waiting_for_add_admin)
                await message.reply("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:", reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]],
                    resize_keyboard=True
                ))
        
        elif message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            if admin_manager.is_main_admin(message.from_user.id):
                await state.set_state(AdminStates.waiting_for_remove_admin)
                admins = db.get_all_admins()
                admin_list = "\n".join([
                    f"{'üëë' if admin['is_main_admin'] else 'üë§'} "
                    f"ID: {admin['user_id']}"
                    f"{f' (@{admin['username']})' if admin['username'] else ''}"
                    for admin in admins
                ])
                await message.reply(
                    "–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n"
                    f"{admin_list}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    reply_markup=types.ReplyKeyboardMarkup(
                        keyboard=[[types.KeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]],
                        resize_keyboard=True
                    )
                )
        
        elif message.text == "üìõ–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
            await state.set_state(UserStates.waiting_for_application)
            db.save_user_state(message.from_user.id, "waiting_for_application")
            await message.reply("üìõüëáüìõ–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –£–ö:", reply_markup=submit_application)
        elif message.text == "üìû–°–≤—è–∑–∞—Ç—å—Å—è":
            await state.set_state(UserStates.waiting_for_contact)
            db.save_user_state(message.from_user.id, "waiting_for_contact")
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:", reply_markup=contact_us)
        elif message.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await state.set_state(UserStates.waiting_for_settings)
            db.save_user_state(message.from_user.id, "waiting_for_settings")
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_settings)
        elif message.text == "‚òéÔ∏è–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if admin_manager.is_admin(message.from_user.id):
                await message.reply(CONTACTS_TEXT, parse_mode="MarkdownV2", reply_markup=user_with_admin)
            else:
                await message.reply(CONTACTS_TEXT, parse_mode="MarkdownV2", reply_markup=start_button)

    @dp.message(StateFilter(UserStates.waiting_for_application))
    async def handle_application(message: types.Message, state: FSMContext):
        if message.text == "üìõ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            user_data = db.get_user(message.from_user.id)
            if user_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(full_name=user_data['full_name'], phone=user_data['phone'])
            
            await state.set_state(UserStates.waiting_for_address)
            await message.answer(
                "–®–∞–≥ 1/3. üìù–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø—Ä–æ–±–ª–µ–º—ã (—É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                reply_markup=types.ReplyKeyboardRemove(),
            )
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=inline_steps
            )
        elif message.text == "üí°–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            user_data = db.get_user(message.from_user.id)
            if user_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(
                    full_name=user_data['full_name'],
                    phone=user_data['phone'],
                    is_suggestion=True
                )
            await state.set_state(UserStates.waiting_for_description)
            await message.answer(
                "üí°–†–∞—Å–ø–∏—à–∏—Ç–µ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö: (–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å)",
                reply_markup=types.ReplyKeyboardRemove()
            )
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=inline_back
            )
        elif message.text == "üîô–ù–∞–∑–∞–¥":
            await state.clear()
            if admin_manager.is_admin(message.from_user.id):
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_with_admin)
            else:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_button)

    @dp.callback_query()
    async def handle_callback(callback: types.CallbackQuery, state: FSMContext):
        current_state = await state.get_state()
        
        if callback.data == "back":
            data = await state.get_data()
            if data.get('is_suggestion'):
                await clear_state(callback.from_user.id, state)
                await callback.message.delete()
                if admin_manager.is_admin(callback.from_user.id):
                    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_with_admin)
                else:
                    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_button)
                return
                
            if current_state == UserStates.waiting_for_call_phone:
                await state.set_state(UserStates.waiting_for_contact)
                await callback.message.delete()
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=contact_us)
            elif current_state in previous_states:
                prev_state = previous_states[current_state]
                if prev_state is None:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    await state.clear()
                    await callback.message.delete()
                    if admin_manager.is_admin(callback.from_user.id):
                        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_with_admin)
                    else:
                        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_button)
                else:
                    await state.set_state(prev_state)
                    if prev_state == UserStates.waiting_for_application:
                        await callback.message.delete()
                        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=submit_application)
                    elif prev_state == UserStates.waiting_for_address:
                        await callback.message.delete()
                        await callback.message.answer(
                            "–®–∞–≥ 1/3. üìù–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø—Ä–æ–±–ª–µ–º—ã (—É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                            reply_markup=types.ReplyKeyboardRemove()
                        )
                        await callback.message.answer(
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                            reply_markup=inline_steps
                        )
                    elif prev_state == UserStates.waiting_for_photo:
                        await callback.message.delete()
                        await callback.message.answer(
                            "–®–∞–≥ 2/3. üñº–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                            reply_markup=types.ReplyKeyboardRemove()
                        )
                        await callback.message.answer(
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                            reply_markup=inline_steps
                        )
                    elif prev_state == UserStates.waiting_for_description:
                        await callback.message.delete()
                        await callback.message.answer(
                            "–®–∞–≥ 3/3. üìõ–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö:",
                            reply_markup=types.ReplyKeyboardRemove()
                        )
                        await callback.message.answer(
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                            reply_markup=inline_back
                        )
        
        elif callback.data == "skip":
            if current_state == UserStates.waiting_for_address:
                await state.update_data(address="–ù–µ —É–∫–∞–∑–∞–Ω")
                await state.set_state(UserStates.waiting_for_photo)
                await callback.message.delete()
                await callback.message.answer(
                    "–®–∞–≥ 2/3. üñº–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                await callback.message.answer(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                    reply_markup=inline_steps
                )
            elif current_state == UserStates.waiting_for_photo:
                await state.update_data(media_type=None, media_id=None)
                await state.set_state(UserStates.waiting_for_description)
                await callback.message.delete()
                await callback.message.answer(
                    "–®–∞–≥ 3/3. üìõ–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö:",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                await callback.message.answer(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                    reply_markup=inline_back
                )
        
        elif callback.data == "submit":
            await state.set_state(UserStates.waiting_for_address)
            await callback.message.edit_text(
                "–®–∞–≥ 1/3. üìù–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø—Ä–æ–±–ª–µ–º—ã (—É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                reply_markup=inline_steps
            )
        
        elif callback.data == "suggestion":
            await state.set_state(UserStates.waiting_for_description)
            await callback.message.edit_text(
                "üí°–†–∞—Å–ø–∏—à–∏—Ç–µ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö: (–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å)",
                reply_markup=inline_back
            )
            
        elif callback.data == "phone_correct":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            user_data = db.get_user(callback.from_user.id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—É
            admin_message = (
                "üìû –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫:\n"
                f"–ò–º—è: {user_data['full_name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
                f"Username: @{callback.from_user.username}"
            )
            await callback.bot.send_message(chat_id=ADMIN_GROUP_ID, text=admin_message)
            # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await callback.message.edit_text(
                "‚úÖ–û—Ç–ª–∏—á–Ω–æ! –ù–∞—à –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_button)
            await state.clear()
        
        elif callback.data in ["phone_change"]:
            if callback.data == "phone_change":
                await callback.message.edit_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:"
                )
                await state.set_state(UserStates.waiting_for_call_phone)
        
        elif callback.data == "reply":
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            user_info = last_messages.get(callback.message.message_id)
            if user_info:
                await state.set_state(UserStates.waiting_for_reply_text)
                await state.update_data(
                    reply_to_user_id=user_info['user_id'],
                    reply_to_full_name=user_info['full_name']
                )
                await callback.message.reply(
                    f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info['full_name']}:",
                    reply_markup=types.ReplyKeyboardMarkup(
                        keyboard=[[types.KeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]],
                        resize_keyboard=True
                    )
                )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        elif callback.data == "end_chat":
            if current_state == UserStates.in_admin_chat:
                await state.clear()
                await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if admin_manager.is_admin(callback.from_user.id):
                    await callback.message.answer(
                        "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=user_with_admin
                    )
                else:
                    await callback.message.answer(
                        "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=start_button
                    )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        await callback.answer()

    @dp.message(StateFilter(UserStates.waiting_for_address))
    async def handle_address(message: types.Message, state: FSMContext):
        if message.text == "üîô–ù–∞–∑–∞–¥":
            await state.set_state(UserStates.waiting_for_application)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=submit_application)
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(address=message.text)
        await state.set_state(UserStates.waiting_for_photo)
        await message.answer(
            "–®–∞–≥ 2/3. üñº–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
            reply_markup=inline_steps
        )

    @dp.message(StateFilter(UserStates.waiting_for_photo))
    async def handle_photo(message: types.Message, state: FSMContext):
        if message.text == "üîô–ù–∞–∑–∞–¥":
            await state.set_state(UserStates.waiting_for_address)
            await message.answer(
                "–®–∞–≥ 1/3. üìù–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø—Ä–æ–±–ª–µ–º—ã (—É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:",
                reply_markup=inline_steps
            )
            return
            
        if message.photo or message.video:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
            media_type = "photo" if message.photo else "video"
            media_id = message.photo[-1].file_id if message.photo else message.video.file_id
            await state.update_data(media_type=media_type, media_id=media_id)
            await state.set_state(UserStates.waiting_for_description)
            await message.answer(
                "–®–∞–≥ 3/3. üìõ–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö:",
                reply_markup=inline_back
            )
        else:
            await message.answer(
                "‚õîÔ∏èüìõ–í –¥–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                reply_markup=inline_steps
            )

    @dp.message(StateFilter(UserStates.waiting_for_description))
    async def handle_description(message: types.Message, state: FSMContext):
        if message.text == "üîô–ù–∞–∑–∞–¥":
            await state.set_state(UserStates.waiting_for_photo)
            await message.answer(
                "–®–∞–≥ 3/3. üìõ–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö:",
                reply_markup=inline_steps
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(description=message.text)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user_data = db.get_user(message.from_user.id)
        
        if user_data:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if data.get('is_suggestion'):
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö
                escaped_phone = escape_markdown(user_data['phone'])
                escaped_name = escape_markdown(user_data['full_name'])
                escaped_username = escape_markdown(message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω")
                escaped_description = escape_markdown(data['description'])
                
                admin_message = (
                    "*üí°–ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:*\n\n"
                    f"*username:* @{escaped_username}\n"
                    f"*–ò–º—è –∏ –§–∞–º–∏–ª–∏—è:* {escaped_name}\n"
                    f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {escaped_phone}\n"
                    f"*–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:* {escaped_description}"
                )
            else:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö
                escaped_phone = escape_markdown(user_data['phone'])
                escaped_name = escape_markdown(user_data['full_name'])
                escaped_username = escape_markdown(message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω")
                escaped_description = escape_markdown(data['description'])
                escaped_address = escape_markdown(data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω'))
                
                admin_message = (
                    "*‚õîÔ∏è–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∂–∞–ª–æ–±–∞:*\n\n"
                    f"*username:* @{escaped_username}\n"
                    f"*–ò–º—è –∏ –§–∞–º–∏–ª–∏—è:* {escaped_name}\n"
                    f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* {escaped_phone}\n"
                    f"*–ê–¥—Ä–µ—Å:* {escaped_address}\n"
                    f"*–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:* {escaped_description}"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if data.get('media_type') == 'photo':
                await message.bot.send_photo(
                    ADMIN_GROUP_ID,
                    data['media_id'],
                    caption=admin_message,
                    reply_markup=reply_button,
                    parse_mode="MarkdownV2"
                )
            elif data.get('media_type') == 'video':
                await message.bot.send_video(
                    ADMIN_GROUP_ID,
                    data['media_id'],
                    caption=admin_message,
                    reply_markup=reply_button,
                    parse_mode="MarkdownV2"
                )
            else:
                await message.bot.send_message(
                    ADMIN_GROUP_ID,
                    admin_message,
                    reply_markup=reply_button,
                    parse_mode="MarkdownV2"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if data.get('is_suggestion'):
                await message.answer(
                    '‚úÖüí°–ò–¥–µ—è –ø—Ä–∏–Ω—è—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!',
                    reply_markup=start_button
                )
            else:
                await message.answer(
                    '‚úÖ–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!',
                    reply_markup=start_button
                )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=start_button
            )
            await state.clear()

    @dp.message(StateFilter(UserStates.waiting_for_contact))
    async def handle_contact(message: types.Message, state: FSMContext):
        if message.text == "üìû–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            user_data = db.get_user(message.from_user.id)
            if user_data:
                await state.set_state(UserStates.waiting_for_call_phone)
                await message.answer(
                    f"–≠—Ç–æ –í–∞—à –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {user_data['phone']}?",
                    reply_markup=confirm_phone
                )
        elif message.text == "üìû–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ —á–∞—Ç-–±–æ—Ç–µ":
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            user_data = db.get_user(message.from_user.id)
            if user_data:
                await state.update_data(
                    full_name=user_data['full_name'],
                    phone=user_data['phone']
                )
                await state.set_state(UserStates.in_admin_chat)
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ inline –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞
                await message.answer(
                    "‚úÖüìû‚úÖ–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø - –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ \"–£–≠–†-–Æ–ì\", –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –í–∞–º. "
                    "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å –∏ –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞\n\n"
                    "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=types.ReplyKeyboardRemove()  # –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                )
                await message.answer(
                    "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                    reply_markup=end_chat  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ inline –∫–Ω–æ–ø–∫—É
                )
        elif message.text == "üîô–ù–∞–∑–∞–¥":
            await state.clear()
            if admin_manager.is_admin(message.from_user.id):
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_with_admin)
            else:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_button)

    @dp.message(StateFilter(UserStates.waiting_for_call_phone))
    async def handle_new_phone(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = message.text.strip()
        if not phone.startswith('+7') or len(phone) != 12 or not phone[1:].isdigit():
            await message.reply(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=None
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—É
        admin_message = (
            "üìû –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫:\n"
            f"–ò–º—è: {(await state.get_data()).get('full_name')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"Username: @{message.from_user.username}"
        )
        await message.bot.send_message(chat_id=ADMIN_GROUP_ID, text=admin_message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_user_phone(message.from_user.id, phone)
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=start_button
        )
        await state.clear()

    @dp.message(StateFilter(UserStates.waiting_for_settings))
    async def handle_settings(message: types.Message, state: FSMContext):
        if message.text == "üõ†–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è":
            await state.set_state(UserStates.waiting_for_change_name)
            await message.reply(
                "üõ†–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –ò–º—è –∏ –§–∞–º–∏–ª–∏—é, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
        elif message.text == "üõ†–ü–æ–º–µ–Ω—è—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
            await state.set_state(UserStates.waiting_for_change_phone)
            await message.reply(
                "üõ†–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
        elif message.text == "üîô–ù–∞–∑–∞–¥":
            await state.clear()
            if admin_manager.is_admin(message.from_user.id):
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_with_admin)
            else:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_button)

    @dp.message(StateFilter(UserStates.waiting_for_change_name))
    async def handle_change_name(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞)
        name_parts = message.text.strip().split()
        if len(name_parts) < 2:
            await message.reply(
                "‚ùå –ò–º—è –∏ –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_user_name(message.from_user.id, message.text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if admin_manager.is_admin(message.from_user.id):
            await message.reply(
                "üõ†‚úÖüõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!",
                reply_markup=user_with_admin
            )
        else:
            await message.reply(
                "üõ†‚úÖüõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!",
                reply_markup=start_button
            )
        await state.clear()

    @dp.message(StateFilter(UserStates.waiting_for_change_phone))
    async def handle_change_phone(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = message.text.strip()
        if not phone.startswith('+7') or len(phone) != 12 or not phone[1:].isdigit():
            await message.reply(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_user_phone(message.from_user.id, phone)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if admin_manager.is_admin(message.from_user.id):
            await message.reply(
                "üõ†‚úÖüõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!",
                reply_markup=user_with_admin
            )
        else:
            await message.reply(
                "üõ†‚úÖüõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!",
                reply_markup=start_button
            )
        await state.clear()

    @dp.message(StateFilter(UserStates.waiting_for_contacts))
    async def handle_contacts(message: types.Message, state: FSMContext):
        if message.text == "üîô–ù–∞–∑–∞–¥":
            await state.clear()
            if admin_manager.is_admin(message.from_user.id):
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_with_admin)
            else:
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_button)

    @dp.message(StateFilter(UserStates.in_admin_chat))
    async def handle_admin_chat(message: types.Message, state: FSMContext):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.get_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        admin_message = (
            "üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ:\n\n"
            f"–û—Ç: {data.get('full_name')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
            f"Username: @{message.from_user.username}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text if message.text else ''}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        sent_message = None
        try:
            if message.photo:
                sent_message = await message.bot.send_photo(
                    chat_id=ADMIN_GROUP_ID,
                    photo=message.photo[-1].file_id,
                    caption=admin_message if message.caption else None,
                    reply_markup=reply_button
                )
            elif message.video:
                sent_message = await message.bot.send_video(
                    chat_id=ADMIN_GROUP_ID,
                    video=message.video.file_id,
                    caption=admin_message if message.caption else None,
                    reply_markup=reply_button
                )
            else:
                sent_message = await message.bot.send_message(
                    chat_id=ADMIN_GROUP_ID,
                    text=admin_message,
                    reply_markup=reply_button
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if sent_message:
                last_messages[sent_message.message_id] = {
                    'user_id': message.from_user.id,
                    'username': message.from_user.username,
                    'full_name': data.get('full_name'),
                    'message_id': message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.reply(
                "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.",
                reply_markup=end_chat
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=end_chat
            )

    @dp.message(StateFilter(UserStates.waiting_for_reply_text))
    async def handle_reply_text(message: types.Message, state: FSMContext):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        data = await state.get_data()
        user_id = data.get('reply_to_user_id')
        user_full_name = data.get('reply_to_full_name')
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = (
                "üë®‚Äçüíº –û—Ç–≤–µ—Ç –æ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:\n\n"
                f"{message.text}"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ last_messages
            user_message_id = None
            for msg_id, msg_data in last_messages.items():
                if msg_data.get('user_id') == user_id:
                    user_message_id = msg_data.get('message_id')
                    break
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ reply –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.photo:
                await message.bot.send_photo(
                    chat_id=user_id,
                    photo=message.photo[-1].file_id,
                    caption=response,
                    reply_to_message_id=user_message_id
                )
            elif message.video:
                await message.bot.send_video(
                    chat_id=user_id,
                    video=message.video.file_id,
                    caption=response,
                    reply_to_message_id=user_message_id
                )
            else:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=response,
                    reply_to_message_id=user_message_id
                )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await message.reply(
                f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_full_name}."
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        except Exception as e:
            await message.reply(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
                f"–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞."
            )
            await state.clear()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    @dp.message(Command("admin"))
    async def admin_command(message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        await admin_panel.handle_admin_command(message, state)

    @dp.callback_query(lambda c: c.data and c.data.startswith('admin_'))
    async def admin_callback(callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        await admin_panel.handle_admin_callback(callback, state)

    @dp.message(StateFilter(AdminStates.waiting_for_broadcast))
    async def handle_broadcast(message: types.Message, state: FSMContext):
        if message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            await state.clear()
            await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel)
            return
        await admin_manager.handle_broadcast(message, state)

    @dp.message(StateFilter(AdminStates.waiting_for_user_info))
    async def handle_user_info(message: types.Message, state: FSMContext):
        if message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            await state.clear()
            await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel)
            return
        await admin_manager.handle_user_info(message, state)

    @dp.message(StateFilter(AdminStates.waiting_for_block_user))
    async def handle_block_user(message: types.Message, state: FSMContext):
        if message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            await state.clear()
            await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel)
            return
        await admin_manager.handle_block_user(message, state)

    @dp.message(StateFilter(AdminStates.waiting_for_unblock_user))
    async def handle_unblock_user(message: types.Message, state: FSMContext):
        if message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            await state.clear()
            await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel)
            return
        await admin_manager.handle_unblock_user(message, state)

    @dp.message(StateFilter(AdminStates.waiting_for_add_admin))
    async def handle_add_admin(message: types.Message, state: FSMContext):
        if message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            await state.clear()
            await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel)
            return
        await admin_manager.handle_add_admin(message, state)

    @dp.message(StateFilter(AdminStates.waiting_for_remove_admin))
    async def handle_remove_admin(message: types.Message, state: FSMContext):
        if message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            await state.clear()
            await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel)
            return
        await admin_manager.handle_remove_admin(message, state)

    @dp.message(AdminStates.waiting_for_block_reason)
    async def handle_block_reason(message: types.Message, state: FSMContext):
        if message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            await state.clear()
            await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel)
            return
            
        data = await state.get_data()
        user_id = data['block_user_id']
        user_info = data['block_user_info']
        reason = None if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text

        try:
            db.block_user(user_id, message.from_user.id, reason)
            response = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info['full_name']} (@{user_info['username']}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
            if reason:
                response += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            await message.reply(response, reply_markup=admin_panel)
        except Exception as e:
            await message.reply(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}",
                reply_markup=admin_panel
            )

        await state.clear()

    @dp.message(lambda message: message.text in [
        "üìõ–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
        "üìû–°–≤—è–∑–∞—Ç—å—Å—è",
        "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "‚òéÔ∏è–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
        "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    ])
    async def handle_main_menu_from_any_state(message: types.Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_admin = admin_manager.is_admin(message.from_user.id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if message.text == "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            if is_admin:
                await state.clear()
                await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_panel)
            else:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=start_button)
        else:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await state.clear()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await state.update_data(is_admin=is_admin)
            
            if message.text == "üìõ–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
                await state.set_state(UserStates.waiting_for_application)
                await message.answer("üìõüëáüìõ–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –£–ö:", reply_markup=submit_application)
            elif message.text == "üìû–°–≤—è–∑–∞—Ç—å—Å—è":
                await state.set_state(UserStates.waiting_for_contact)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:", reply_markup=contact_us)
            elif message.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                await state.set_state(UserStates.waiting_for_settings)
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_settings)
            elif message.text == "‚òéÔ∏è–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
                if is_admin:
                    await message.answer(CONTACTS_TEXT, parse_mode="MarkdownV2", reply_markup=user_with_admin)
                else:
                    await message.answer(CONTACTS_TEXT, parse_mode="MarkdownV2", reply_markup=start_button)

    async def clear_state(user_id: int, state: FSMContext):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        await state.clear()
        db.clear_user_state(user_id)

    def escape_markdown(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
        chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in chars:
            text = text.replace(char, f'\\{char}')
        return text

    @dp.callback_query(lambda c: c.data in ["prev_page", "next_page", "first_page", "last_page"] or c.data.startswith("page_"))
    async def handle_page_navigation(callback: types.CallbackQuery, state: FSMContext):
        if not admin_manager.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        current_text = callback.message.text
        users = db.get_all_users()
        users_per_page = 20
        total_pages = (len(users) + users_per_page - 1) // users_per_page

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        current_page = 1
        if "–°—Ç—Ä–∞–Ω–∏—Ü–∞" in current_text:
            current_page = int(current_text.split("–°—Ç—Ä–∞–Ω–∏—Ü–∞")[1].split("/")[0].strip())

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if callback.data == "first_page":
            new_page = 1
        elif callback.data == "last_page":
            new_page = total_pages
        elif callback.data == "prev_page":
            new_page = max(1, current_page - 1)
        elif callback.data == "next_page":
            new_page = min(total_pages, current_page + 1)
        elif callback.data.startswith("page_"):
            new_page = int(callback.data.split("_")[1])
        else:
            new_page = current_page

        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
        if new_page == current_page:
            await callback.answer()
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (new_page - 1) * users_per_page
        end_idx = min(start_idx + users_per_page, len(users))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        header = (
            f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {new_page}/{total_pages})\n"
            f"–í—Å–µ–≥–æ: {len(users)} | "
            f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {sum(1 for user in users if admin_manager.is_user_blocked(user['user_id']))} | "
            f"–ê–¥–º–∏–Ω–æ–≤: {sum(1 for user in users if admin_manager.is_admin(user['user_id']))}\n\n"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        user_list = ""
        for user in users[start_idx:end_idx]:
            status = "üö´" if admin_manager.is_user_blocked(user['user_id']) else "‚úÖ"
            role = "üëë" if admin_manager.is_main_admin(user['user_id']) else "üë§" if admin_manager.is_admin(user['user_id']) else "üë•"
            user_list += (
                f"{status}{role} {user['full_name']}\n"
                f"ID: {user['user_id']} | "
                f"@{user['username'] if user['username'] else '–ù–µ—Ç username'} | "
                f"{user['phone']}\n"
                "-------------------\n"
            )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        if total_pages > 1:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            keyboard.append([
                types.InlineKeyboardButton(text="‚èÆÔ∏è", callback_data="first_page"),
                types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="prev_page"),
                types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="next_page"),
                types.InlineKeyboardButton(text="‚è≠Ô∏è", callback_data="last_page")
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_buttons = []
            for i in range(1, total_pages + 1):
                if i == 1 or i == total_pages or (i >= new_page - 1 and i <= new_page + 1):
                    page_buttons.append(types.InlineKeyboardButton(
                        text=f"{'üî¥' if i == new_page else '‚ö™Ô∏è'} {i}",
                        callback_data=f"page_{i}"
                    ))
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ —Ä—è–¥—ã –ø–æ 5 —à—Ç—É–∫
            for i in range(0, len(page_buttons), 5):
                keyboard.append(page_buttons[i:i+5])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            header + user_list,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard) if keyboard else None
        )
        await callback.answer()

            
            
