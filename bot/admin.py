from aiogram import types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from .config import ADMIN_GROUP_ID
from .database import Database
from .bottom import admin_panel

class AdminStates(StatesGroup):
    waiting_for_broadcast = State()
    waiting_for_user_info = State()
    waiting_for_block_user = State()
    waiting_for_unblock_user = State()
    waiting_for_add_admin = State()
    waiting_for_remove_admin = State()
    waiting_for_block_reason = State()

class AdminPanel:
    def __init__(self):
        self.db = Database()

    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return self.db.is_admin(user_id) or self.is_main_admin(user_id)

    def is_main_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return self.db.is_main_admin(user_id)

    async def handle_admin_command(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        if not self.is_admin(message.from_user.id):
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        buttons = [
            [
                types.InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
                types.InlineKeyboardButton(text="üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data="admin_user_info")
            ],
            [
                types.InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_block_user"),
                types.InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unblock_user")
            ]
        ]

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if self.is_main_admin(message.from_user.id):
            buttons.append([
                types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add_admin"),
                types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_remove_admin")
            ])

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.reply("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)

    async def handle_admin_callback(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        if not self.is_admin(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        if callback.data == "admin_broadcast":
            await state.set_state(AdminStates.waiting_for_broadcast)
            await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        
        elif callback.data == "admin_user_info":
            await state.set_state(AdminStates.waiting_for_user_info)
            await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        
        elif callback.data == "admin_block_user":
            await state.set_state(AdminStates.waiting_for_block_user)
            await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        
        elif callback.data == "admin_unblock_user":
            await state.set_state(AdminStates.waiting_for_unblock_user)
            await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        
        elif callback.data == "admin_add_admin" and self.is_main_admin(callback.from_user.id):
            await state.set_state(AdminStates.waiting_for_add_admin)
            await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")
        
        elif callback.data == "admin_remove_admin" and self.is_main_admin(callback.from_user.id):
            await state.set_state(AdminStates.waiting_for_remove_admin)
            admins = self.db.get_all_admins()
            admin_list = "\n".join([
                f"{'üëë' if admin['is_main_admin'] else 'üë§'} "
                f"ID: {admin['user_id']}"
                f"{f' (@{admin['username']})' if admin['username'] else ''}"
                for admin in admins
            ])
            await callback.message.reply(
                "–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n"
                f"{admin_list}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
            )

        await callback.answer()

    async def handle_add_admin(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.is_main_admin(message.from_user.id):
            await message.reply("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ ID
        user = self.db.get_user_by_username_or_id(message.text)
        
        if user:
            if self.db.is_admin(user['user_id']):
                await message.reply("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            else:
                self.db.add_admin(user['user_id'], user['username'])
                await message.reply(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['full_name']} (@{user['username']}) "
                    "—É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
        else:
            await message.reply(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ "
                "–∏ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –µ–≥–æ username –∏–ª–∏ ID."
            )
        
        await state.clear()

    async def handle_remove_admin(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.is_main_admin(message.from_user.id):
            await message.reply("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        user_id = None
        if message.text.isdigit():
            user_id = int(message.text)
        else:
            username = message.text.lstrip('@')
            user = self.db.get_user_by_username(username)
            if user:
                user_id = user['user_id']

        if user_id:
            if self.db.is_main_admin(user_id):
                await message.reply("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            elif self.db.is_admin(user_id):
                self.db.remove_admin(user_id)
                await message.reply("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            else:
                await message.reply("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            await message.reply("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        await state.clear()

    async def handle_broadcast(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.is_admin(message.from_user.id):
            return

        users = self.db.get_all_users()
        success_count = 0
        fail_count = 0

        for user in users:
            try:
                await message.bot.send_message(user['user_id'], message.text)
                success_count += 1
            except Exception:
                fail_count += 1

        await message.reply(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"–û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {fail_count}"
        )
        await state.clear()

    async def handle_user_info(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if not self.is_admin(message.from_user.id):
            return

        user_id = None
        if message.text.isdigit():
            user_id = int(message.text)
        else:
            username = message.text.lstrip('@')
            user = self.db.get_user_by_username(username)
            if user:
                user_id = user['user_id']

        if user_id:
            user_data = self.db.get_user(user_id)
            if user_data:
                admin_status = "üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if self.db.is_main_admin(user_id) else "üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if self.db.is_admin(user_id) else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                blocked_status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if self.db.is_user_blocked(user_id) else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                await message.reply(
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
                    f"ID: {user_data['user_id']}\n"
                    f"Username: @{user_data['username']}\n"
                    f"–ò–º—è: {user_data['full_name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
                    f"–†–æ–ª—å: {admin_status}\n"
                    f"–°—Ç–∞—Ç—É—Å: {blocked_status}"
                )
            else:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        await state.clear()

    async def handle_block_user(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.is_admin(message.from_user.id):
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ ID
        user = self.db.get_user_by_username_or_id(message.text)
        
        if user:
            user_id = user['user_id']
            if self.db.is_admin(user_id):
                await message.reply("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            elif self.db.is_user_blocked(user_id):
                block_info = self.db.get_block_info(user_id)
                admin_info = f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{block_info['admin_username']}" if block_info['admin_username'] else f"–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {block_info['admin_name']}"
                await message.reply(
                    f"‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {admin_info}\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {block_info['reason'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                    f"–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {block_info['blocked_at']}"
                )
            else:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                async with state.proxy() as data:
                    data['block_user_id'] = user_id
                    data['block_user_info'] = user
                await state.set_state(AdminStates.waiting_for_block_reason)
                await message.reply(
                    "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
                    reply_markup=types.ReplyKeyboardMarkup(
                        keyboard=[
                            [types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                            [types.KeyboardButton(text="üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]
                        ],
                        resize_keyboard=True
                    )
                )
        else:
            await message.reply(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ "
                "–∏ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –µ–≥–æ username –∏–ª–∏ ID."
            )

    async def handle_block_reason(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if message.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            await state.clear()
            await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel)
            return

        async with state.proxy() as data:
            user_id = data['block_user_id']
            user_info = data['block_user_info']
            reason = None if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text

        try:
            self.db.block_user(user_id, message.from_user.id, reason)
            response = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info['full_name']} (@{user_info['username']}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
            if reason:
                response += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            await message.reply(response, reply_markup=admin_panel)
        except Exception as e:
            await message.reply(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}",
                reply_markup=admin_panel
            )

        await state.clear()

    async def handle_unblock_user(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.is_admin(message.from_user.id):
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ ID
        user = self.db.get_user_by_username_or_id(message.text)
        
        if user:
            user_id = user['user_id']
            if not self.db.is_user_blocked(user_id):
                await message.reply("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            else:
                try:
                    self.db.unblock_user(user_id)
                    await message.reply(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['full_name']} (@{user['username']}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                    )
                except Exception as e:
                    await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        else:
            await message.reply(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ "
                "–∏ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –µ–≥–æ username –∏–ª–∏ ID."
            )

        await state.clear()

    def is_user_blocked(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return self.db.is_user_blocked(user_id) 